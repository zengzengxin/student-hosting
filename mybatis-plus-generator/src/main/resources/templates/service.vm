package ${package.Service};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};

import ${superServiceImplClassPackage};

import ${package.Entity}.${entity}QueryDTO;
import ${package.Entity}.${entity}UpdateDTO;
import ${package.Entity}.${entity}VO;
import ${package.Entity}.${entity}AddDTO;

import com.baomidou.mybatisplus.core.metadata.IPage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import com.luwei.common.exception.MessageCodes;
import com.luwei.common.utils.BeanUtils;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import javax.transaction.Transactional;
import java.util.Set;
import com.luwei.common.utils.BeanUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.luwei.utils.ConversionBeanUtils;
import java.time.LocalDateTime;
#set($start=$entity.substring(0,1).toLowerCase() )
#set($end=$entity.substring(1,$entity.length()).toLowerCase() )
/**
* <p>
    * $!{table.comment} 服务类
    * </p>
*
* @author ${author}
* @since ${date}
*/
@Service
@Slf4j
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> {
public ${entity}VO findById(Integer id) {
    ${entity} ${start}${end} = getById(id);
    //TODO记得修改MessageCodes
Assert.notNull(${start}${end}, MessageCodes.DATA_IS_NOT_EXIST);
return to${entity}VO(${start}${end});
}

private ${entity}VO to${entity}VO(${entity} ${start}${end}) {
    ${entity}VO ${start}${end}VO = new ${entity}VO();
BeanUtils.copyNonNullProperties(${start}${end}, ${start}${end}VO);
return ${start}${end}VO;
}


    @Transactional
    public ${entity}VO save${entity}(${entity}AddDTO ${start}${end}AddDTO) {
        ${entity} ${start}${end} = new ${entity}();
        BeanUtils.copyNonNullProperties(${start}${end}AddDTO, ${start}${end});
        LocalDateTime time=LocalDateTime.now();
        ${start}${end}.setUpdateTime(time);
        ${start}${end}.setCreateTime(time);
        //设置一些具体逻辑，是否需要加上deleted字段等等
        boolean isSuccess = save(${start}${end});
        Assert.isTrue(isSuccess,MessageCodes.DATA_SAVE_ERROR);
        log.info("保存数据---:{}", ${start}${end});
        return to${entity}VO(${start}${end});
    }

    @Transactional
    public void delete${entity}s(Set<Integer> ids) {
    //removeByIds删除0条也是返回true的，所以需要使用baseMapper
        int count = baseMapper.deleteBatchIds(ids);
        Assert.isTrue(count == ids.size(), MessageCodes.DATA_DELETE_ERROR);
        log.info("删除数据:id{}", ids);
    }

    @Transactional
    public ${entity}VO update${entity}(${entity}UpdateDTO ${start}${end}UpdateDTO) {
        ${entity} ${start}${end} = new ${entity}();
        BeanUtils.copyNonNullProperties(${start}${end}UpdateDTO, ${start}${end});

        ${start}${end}.setUpdateTime(LocalDateTime.now());

        //updateById不会把null的值赋值，修改成功后也不会赋值数据库所有的值
        Assert.isTrue(updateById(${start}${end}), MessageCodes.DATA_IS_UPDATE_ERROR);
        log.info("修改数据：bean:{}", ${start}${end}UpdateDTO);
        return findById(${start}${end}.get${entity}Id());
    }

    public IPage<${entity}VO> find${entity}Page (${entity}QueryDTO ${start}${end}QueryDTO, Page page) {
        ${entity} ${start}${end} = new ${entity}();
        BeanUtils.copyNonNullProperties(${start}${end}QueryDTO, ${start}${end});
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        //查询业务
        return ConversionBeanUtils.conversionBean(baseMapper.selectPage(page, queryWrapper), this::to${entity}VO);
    }
}
#end
